Problem Statement:
===================

Given an infix expression in the form of string str. Conver this infix expression to postfix expression.

Infix expression: The expression of the form a op b. When an operator is in-between every pair of operands.
Postfix expression: The expression of the form a b op. When an operator is followed for every pair of operands.
​Note: The order of precedence is: ^ greater than * equals to / greater than + equals to -. 
Input:
The first line of input contains an integer T denoting the number of test cases. The next T lines contain an infix expression. The expression contains all characters and ^,*,/,+,-. 

Output:
For each testcase, in a new line, output the infix expression to postfix expression.

Your Task:
This is a function problem. You only need to complete the function infixToPostfix() that takes a string as a parameter and returns the postfix expression. The printing is done automatically by the driver code.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(N).

Constraints:
1 <= T <= 100
1 <= length of str <= 103

Example:
Input:
2
a+b*(c^d-e)^(f+g*h)-i
A*(B+C)/D
Output:
abcd^e-fgh*+^*+i-
ABC+*D/

Explanation:
Testcase 1: After converting the infix expression into postfix expression , the resultant expression will be abcd^e-fgh*+^*+i-
Testcase 2: After converting the infix expression into postfix expression , the resultant expression will be ABC+*D/

Solution:
=========

// The main function to convert infix expression
//to postfix expression
int precedence(char x){
    char prec_arr[] = {'-', '+', '/', '*', '^'};
    for(int i= 0; i < sizeof(prec_arr)/sizeof(prec_arr[0]); i++){
        if (prec_arr[i] == x){
            return i;
        }
    }
    return -1;
}

/*
Algorithm
1. Scan the infix expression from left to right.
2. If the scanned character is an operand, output it.
3. Else,
…..3.1 If the precedence of the scanned operator is greater than the precedence of the operator in the stack(or the stack is empty or the stack contains a ‘(‘ ), push it.
…..3.2 Else, Pop all the operators from the stack which are greater than or equal to in precedence than that of the scanned operator. After doing that Push the scanned operator to the stack. (If you encounter parenthesis while popping then stop there and push the scanned operator in the stack.)
4. If the scanned character is an ‘(‘, push it to the stack.
5. If the scanned character is an ‘)’, pop the stack and and output it until a ‘(‘ is encountered, and discard both the parenthesis.
6. Repeat steps 2-6 until infix expression is scanned.
7. Print the output
8. Pop and output from the stack until it is not empty.

*/
string infixToPostfix(string s)
{
    string newS;
    stack <char> st;
    for(std::string::iterator it = s.begin(); it != s.end(); ++it){
        if(isalnum(*it)){
            newS = newS + *it;
        }else{
            if(*it == ')'){
                while(st.top() != '('){
                    newS = newS + st.top();
                    st.pop();    
                }
                st.pop();
            }
            else if (st.empty() || (*it == '(') || (precedence(*it) > precedence(st.top()) ))
            {
                st.push(*it);
            }else{
                while(!st.empty() && (precedence(st.top()) > precedence(*it))){
                  newS = newS + st.top();
                  st.pop();
                }
                st.push(*it);
            }
        }
    }
    while(!st.empty()){
        newS = newS + st.top();
        st.pop();
    }
    return newS;
}
