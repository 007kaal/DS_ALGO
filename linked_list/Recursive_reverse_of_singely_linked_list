Given a linked list of N nodes. The task is to reverse this list.

    Input: Head of following linked list
    1->2->3->4->NULL
    Output: Linked list should be changed to,
    4->3->2->1->NULL

    Input: Head of following linked list
    1->2->3->4->5->NULL
    Output: Linked list should be changed to,
    5->4->3->2->1->NULL

    Input: NULL
    Output: NULL

    Input: 1->NULL
    Output: 1->NULL

Input:
First line of input contains number of testcases T. For each testcase, first line contains length of linked list and next line contains the elements of linked list.

Output:
Reverse the linked list and return head of the modified list.

User Task:
The task is to complete the function reverseList() which head reference as the only argument and should return new head after reversing the list.

Constraints:
1 <= T <= 100
1 <= N <= 103

Example:
Input:
2
6
1 2 3 4 5 6
5
2 7 8 9 10
Output:
6 5 4 3 2 1
10 9 8 7 2

Explanation:
Testcase 1: After reversing the list, elements are as 6->5->4->3->2->1.
Testcase 2: After reversing the list, elements are as 10->9->8->7->2.


struct Node {
  int data;
  struct Node *next;
  Node(int x) {
    data = x;
    next = NULL;
  }
};

// Should reverse list and return new head.
Node* reverseList(Node *head)
{
  if (head == NULL || head->next == NULL) 
            return head; 
  
        /* reverse the rest list and put the first element at the end */
        Node* newHead = reverseList(head->next); 
        head->next->next = head; 
  
        /* put the earlier head->next to NULL, as it is the last node now */
        head->next = NULL; 
  
        /* return new head pointer */
        return newHead; 
}
