Problem Statement:
==================
Given two numbers represented by two linked lists of size N and M. The task is to return a sum list. The sum list which is a linked list representation of addition of two input numbers.

Input:
First line of input contains number of testcases T. For each testcase, first line of input contains length of first linked list and next line contains N elements of the linked list. Again, next line contains M, and following line contains M elements of the linked list.

Output:
Output the resultant linked list.

User Task:
The task is to complete the function addTwoLists() which has node reference of both the linked lists and returns the head of new list.

Constraints:
1 <= T <= 100
1 <= N, M <= 100

Example:
Input:
2
2
4 5
3
3 4 5
2
6 3
1
7
Output:
0 9 3 
0 7

Explaination:
Testcase 1: For the given two linked list (4 5) and (3 4 5) ,after adding the two linked list resultant linked list will be (0 9 3).
Testcase 2: For the given two linked list (6 3) and (7) , after adding the two linked list resultant linked list will be (0 7).

Note:
The linked list has been constructed in the reverse order of the number. That is, if the number given is 123 then the linked list representing it is: 3 -> 2 -> 1

Solution:
========

#User function Template for python3
'''
	Function to add two numbers represented 
	in the form of the linked list.
	
	Function Arguments: head_a and head_b (heads of both the linked lists)
	Return Type: head of the resultant linked list.
    
    __>IMP : numbers are represented in reverse in the linked list.
    Ex:
        145 is represented as  5->4->1.
    
    resultant head is expected in the same format.
    
# Node Class
class Node:
    def __init__(self, data):   # data -> value stored in node
        self.data = data
        self.next = None
'''
def addBoth(head_a,head_b):
    sum_head = None
    curr = None
    carry = 0

    while (head_a or head_b):
        x = 0; y = 0
        if head_a :
            x = head_a.data
            head_a = head_a.next
        if head_b:
            y = head_b.data
            head_b = head_b.next
            
        sum = (x + y + carry) % 10
        carry = (x + y + carry) // 10
    
        if not sum_head:
            sum_head = Node(sum)
            curr = sum_head
        else:
            curr.next = Node(sum)
            curr = curr.next

    return sum_head
